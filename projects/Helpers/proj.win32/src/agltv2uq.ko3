// Copyright (c) 2012 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.

#include "binding_test.h"
#include "simple_handler.h"

#include "../lib/base/global.h"
#include "../lib/core/XObserver.h"
#include "../lib/"
#include "json/json.h"

#include "include/wrapper/cef_stream_resource_handler.h"
#include <wtypes.h>
#include <afxwin.h>
#include <atlbase.h>  
#include <shlobj.h>  
#include <algorithm>
#include <string>
#include <csignal>

namespace binding_test {

namespace {

const char kTestUrl[] = "http://tests/binding";
const char kTestMessageName[] = "CallNative";

class Callback : public CefBase {
public:
	///
	// Notify the associated JavaScript onSuccess callback that the query has
	// completed successfully with the specified |response|.
	///
	virtual void Success(const CefString& response) = 0;

	///
	// Notify the associated JavaScript onFailure callback that the query has
	// failed with the specified |error_code| and |error_message|.
	///
	virtual void Failure(int error_code, const CefString& error_message) = 0;
};

// Handle messages in the browser process.
class Handler : public CefMessageRouterBrowserSide::Handler{
 public:
  Handler() {}

  // Called due to cefQuery execution in binding.html.
  virtual bool OnQuery(CefRefPtr<CefBrowser> browser,
						  CefRefPtr<CefFrame> frame,
						  int64 query_id,
						  const CefString& request,
						  bool persistent,
						  CefRefPtr<Callback> callback) OVERRIDE{
    // Only handle messages from the test URL.
    const std::string& url = frame->GetURL();
    //if (url.find(kTestUrl) != 0)
    //  return false;

    const std::string& message = request;
	Json::Value root;
	if (message != ""){
		Json::Reader jReader;
		jReader.parse(message, root);
	}
	if (!root.isNull()) {
      // Reverse the string and return.
		std::string funcName = root["funcName"].asString();
		XOBSERVER->notify(funcName);
		callback->Success("success");
		//frame->ExecuteJavaScript("nativeCallJs(\"funcName\")","native",0);
      return true;
    }

    return false;
  }
};

}  // namespace

void CreateMessageHandlers(SimpleHandler::MessageHandlerSet& handlers) {

	//注册方法
	XOBSERVER->listen("selectDirectory", [](std::string str){
		XLOG("selectDirectory");

		LPMALLOC lpMalloc;
		if (::SHGetMalloc(&lpMalloc) != NOERROR)
		{
			AfxMessageBox("选择下载目录操作出错");
			return;
		}
		char szDisplayName[_MAX_PATH];
		char szBuffer[_MAX_PATH];
		BROWSEINFO browseInfo;
		browseInfo.hwndOwner = SimpleApp::hwnd;
		browseInfo.pidlRoot = NULL;
		browseInfo.pszDisplayName = szDisplayName;
		browseInfo.lpszTitle = "请选择下载文件的存储路径";
		browseInfo.ulFlags = BIF_RETURNFSANCESTORS | BIF_RETURNONLYFSDIRS;
		browseInfo.lpfn = NULL;
		browseInfo.lParam = 0;
		LPITEMIDLIST lpItemIDList;
		if ((lpItemIDList = ::SHBrowseForFolder(&browseInfo)) != NULL)
		{
			if (::SHGetPathFromIDList(lpItemIDList, szBuffer))
			{
				if (szBuffer[0] == '\0')
				{
					AfxMessageBox("Fail to get directory", MB_ICONSTOP | MB_OK);
					return;
				}
				DownFileDirectory = szBuffer;
			}
			else
			{
				AfxMessageBox("Fail to get directory!", MB_ICONSTOP | MB_OK);
				return;
			}
			lpMalloc->Free(lpItemIDList);
			lpMalloc->Release();
		}
		CString strMsg;
		strMsg.Format("选择目录为:%s", DownFileDirectory);
		AfxMessageBox(strMsg);
	});

  handlers.insert(new Handler());
}

}  // namespace binding_test
